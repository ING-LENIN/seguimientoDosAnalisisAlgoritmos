@article{doi:10.1177/07356331221102312,
author = {Anat Ben-Yaacov and Arnon Hershkovitz},
title = {Types of Errors in Block Programming: Driven by Learner, Learning Environment},
journal = {Journal of Educational Computing Research},
volume = {29},
number = {2},
pages = {178–207},
year = {2017a},
doi = {10.1177/07356331221102312},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331221102312},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331221102312},
abstract = {Block programming has been suggested as a way of engaging young learners with the foundations of programming and computational thinking in a syntax-free manner. Indeed, syntax errors—which form one of two broad categories of errors in programming, the other one being logic errors—are omitted while block programming. However, this does not mean that errors are omitted at large in such environments. In this exploratory case study of a learning environment for early programming (Kodetu), we explored errors in block programming of middle school students (N = 123), using log files drawn from a block-based online. Analyzing 1033 failed executions, we found that errors may be driven by either learners’ knowledge and behavior, or by the learning environment design. The rate of error types was not associated with the learners’ and contextual variables examined, with the exception of task complexity (as defined by SOLO taxonomy). Our findings highlight the importance of learning from errors and of learning environment design.}
}

@article{doi:10.1177/07356331221102312,
author = {Anat Ben-Yaacov and Arnon Hershkovitz},
title = {Types of Errors in Block Programming: Driven by Learner, Learning Environment},
journal = {Journal of Educational Computing Research},
volume = {61},
number = {1},
pages = {178–207},
year = {2023b},
doi = {10.1177/07356331221102312},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331221102312},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331221102312},
abstract = {Block programming has been suggested as a way of engaging young learners with the foundations of programming and computational thinking in a syntax-free manner. Indeed, syntax errors—which form one of two broad categories of errors in programming, the other one being logic errors—are omitted while block programming. However, this does not mean that errors are omitted at large in such environments. In this exploratory case study of a learning environment for early programming (Kodetu), we explored errors in block programming of middle school students (N = 123), using log files drawn from a block-based online. Analyzing 1033 failed executions, we found that errors may be driven by either learners’ knowledge and behavior, or by the learning environment design. The rate of error types was not associated with the learners’ and contextual variables examined, with the exception of task complexity (as defined by SOLO taxonomy). Our findings highlight the importance of learning from errors and of learning environment design.}
}

@article{doi:10.1177/1729881418820425,
author = {Aurelio Bermúdez and Rafael Casado and Guillermo Fernández and María Guijarro and Pablo Olivas},
title = {Drone challenge: A platform for promoting programming and robotics skills in K-12 education},
journal = {International Journal of Advanced Robotic Systems},
volume = {16},
number = {1},
pages = {1729881418820425},
year = {2019c},
doi = {10.1177/1729881418820425},
URL = {https://doi-org.crai.referencistas.com/10.1177/1729881418820425},
eprint = {https://doi-org.crai.referencistas.com/10.1177/1729881418820425},
abstract = {The development of skills related to computer programming and robotics and the introduction of computational thinking principles in high schools are worldwide trends today. An effective way of initiating young students in this world consists in proposing them stimulating challenges. This work presents a robotic platform that has been successfully used to develop a competition (called Drone Challenge) in which students had to program the navigation system for a simulated unmanned aerial vehicle (or drone). Both the competition and the supporting platform are described in detail. In particular, the article provides a deep technical description of the main components of the platform, namely the drone simulator and the navigation development framework. The results of the survey conducted after the challenge point to the suitability of the working platform deployed.}
}

@article{doi:10.3233/EFI-230020,
author = {Tobias Blanke and Giovanni Colavizza and Zarah van Hout},
title = {An open educational resource to introduce data analysis in Python for the Humanities},
journal = {Education for Information},
volume = {39},
number = {2},
pages = {105–119},
year = {2023d},
doi = {10.3233/EFI-230020},
URL = {https://doi-org.crai.referencistas.com/10.3233/EFI-230020},
eprint = {https://doi-org.crai.referencistas.com/10.3233/EFI-230020},
abstract = {The article presents an open educational resource (OER) to introduce humanities students to data analysis with Python. The article beings with positioning the OER within wider pedagogical debates in the digital humanities. The OER is built from our research encounters and committed to computational thinking rather than technicalities. Furthermore, we argue that students best learn with the ‘whole game’ methodology. Learners need to be exposed to meaningful activities as soon and as far as possible. The article presents two examples that implement our approach. The first introduces Python as a data analysis language to students of the humanities. It is different because it concentrates on the principles of the computational thinking behind data analysis rather than programming details. The second example takes the students into the world of machine learning and the whole game of social and cultural research with it. Students learn useful skills such as web scraping but will also run their own machine learning algorithms to follow concrete research questions.}
}

@article{doi:10.3233/EFI-230020,
author = {Tobias Blanke and Giovanni Colavizza and Zarah van Hout},
title = {An open educational resource to introduce data analysis in Python for the Humanities},
journal = {Education for Information},
volume = {13},
number = {4},
pages = {105–119},
year = {2023e},
doi = {10.3233/EFI-230020},
URL = {https://doi-org.crai.referencistas.com/10.3233/EFI-230020},
eprint = {https://doi-org.crai.referencistas.com/10.3233/EFI-230020},
abstract = {The article presents an open educational resource (OER) to introduce humanities students to data analysis with Python. The article beings with positioning the OER within wider pedagogical debates in the digital humanities. The OER is built from our research encounters and committed to computational thinking rather than technicalities. Furthermore, we argue that students best learn with the ‘whole game’ methodology. Learners need to be exposed to meaningful activities as soon and as far as possible. The article presents two examples that implement our approach. The first introduces Python as a data analysis language to students of the humanities. It is different because it concentrates on the principles of the computational thinking behind data analysis rather than programming details. The second example takes the students into the world of machine learning and the whole game of social and cultural research with it. Students learn useful skills such as web scraping but will also run their own machine learning algorithms to follow concrete research questions.}
}

@article{doi:10.1177/07356331241312365,
author = {Qing Guo and Junwen Zhen and Fenglin Wu and Yanting He and Cuilan Qiao},
title = {Can Students Make STEM Progress With the Large Language Models (LLMs)? An Empirical Study of LLMs Integration Within Middle School Science and Engineering Practice},
journal = {Journal of Educational Computing Research},
volume = {63},
number = {2},
pages = {372–405},
year = {2025f},
doi = {10.1177/07356331241312365},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331241312365},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331241312365},
abstract = {The rapid development of large language models (LLMs) presented opportunities for the transformation of science and STEM education. Research on LLMs was in the exploratory phase, characterized by discussions and observations rather than empirical investigations. This study presented a framework for incorporating LLMs into Science and Engineering Practice (SEP), utilizing a case study on submarine construction, followed by a four-week quasi-experimental validation. The research employed conditional cluster sampling, selecting two homogeneous natural classes from a middle school in China to serve as the experimental and control groups. The key experimental variable was the inclusion of LLMs in the SEP project. Various validated and self-developed assessment tools were used to measure students’ STEM learning outcomes. Statistical analyses, including pre- and post-test paired comparisons within classes and ANCOVA for between-class differences, were performed to evaluate the effects of LLM integration. The results showed that students participating in SEP integrated with LLMs significantly improved their mastery of scientific knowledge, attitudes towards science, perceived usefulness of technology, understanding of engineering, computational thinking skills, and problem-solving abilities. In contrast, students participating in traditional SEP exhibited weaker knowledge acquisition, differences in understanding engineering concepts, and lack of development in computational thinking and problem-solving skills. This study was a pioneering effort in integrating LLMs into science education and provided a framework and case reference for the deeper application of LLMs in the future.}
}

@article{doi:10.1177/10534512211024939,
author = {Amy Hutchison and Anya S. Evmenova},
title = {Planning Computer Science Instruction for Students With High-Incidence Disabilities},
journal = {Intervention in School and Clinic},
volume = {57},
number = {4},
pages = {262–267},
year = {2022g},
doi = {10.1177/10534512211024939},
URL = {https://doi-org.crai.referencistas.com/10.1177/10534512211024939},
eprint = {https://doi-org.crai.referencistas.com/10.1177/10534512211024939},
abstract = {States increasingly are adopting computer science standards to help students develop coding and computational thinking skills. In an effort to support teachers in introducing computer science content to their students with high-incidence disabilities, a new model, computer science integration planning plus universal design for learning (CSIP+), offers ways to integrate computational thinking and coding into content area instruction. This column presents an example of how a teacher might implement the CSIP+ model when designing instruction accessible to all learners. Guiding questions to support teachers at each phase of the planning cycle are provided.}
}

@article{doi:10.1177/14780771221139911,
author = {Joohi Lee and Candace Joswick and Kathryn Pole and Robin Jocius},
title = {Algorithm design for young children},
journal = {International Journal of Architectural Computing},
volume = {23},
number = {2},
pages = {728–741},
year = {2022h},
doi = {10.1177/14780771221139911},
URL = {https://doi-org.crai.referencistas.com/10.1177/14780771221139911},
eprint = {https://doi-org.crai.referencistas.com/10.1177/14780771221139911},
abstract = {In a problem-based, digital-intensive learning environment, the increased proliferation of computational tools used for architectural design has led to a fundamental transformation in architectural studios. Many studies have shown that this has significantly led to the change in cognition of design environments in academia. Design decisions are made through a recursive process that is cyclically refined by allowing constant feedback and testing. This paper represents an observational study with an aim to understand the impact of digital mediums on design processes and design outcomes focusing on associative modeling using VPL. It contextualizes the difference, the associative modeling system as a parametric subset brings to design thinking when used as a medium to explore architectural design. It analyzes specific attributes of associative modeling, otherwise native to computational thinking, that contribute to the legibility of the design process. The paper demonstrates how associative modeling allows the design process to be examined and edited at any stage during and even after algorithmic development, bringing in flexibility. It is argued that digital design tool affordances enable students to develop multilayered and more structured design logic that augments cognition bringing more legibility to the design thinking process.}
}

@article{doi:10.1177/14780771221139911,
author = {Dhanashree Sardeshpande and Vasudha Gokhale},
title = {“Legibility” a product of obligatory processes in parametric architectural design: A study of implications of associative modeling on design thinking in a parametric architectural design studio},
journal = {International Journal of Architectural Computing},
volume = {20},
number = {4},
pages = {728–741},
year = {2022i},
doi = {10.1177/14780771221139911},
URL = {https://doi-org.crai.referencistas.com/10.1177/14780771221139911},
eprint = {https://doi-org.crai.referencistas.com/10.1177/14780771221139911},
abstract = {In a problem-based, digital-intensive learning environment, the increased proliferation of computational tools used for architectural design has led to a fundamental transformation in architectural studios. Many studies have shown that this has significantly led to the change in cognition of design environments in academia. Design decisions are made through a recursive process that is cyclically refined by allowing constant feedback and testing. This paper represents an observational study with an aim to understand the impact of digital mediums on design processes and design outcomes focusing on associative modeling using VPL. It contextualizes the difference, the associative modeling system as a parametric subset brings to design thinking when used as a medium to explore architectural design. It analyzes specific attributes of associative modeling, otherwise native to computational thinking, that contribute to the legibility of the design process. The paper demonstrates how associative modeling allows the design process to be examined and edited at any stage during and even after algorithmic development, bringing in flexibility. It is argued that digital design tool affordances enable students to develop multilayered and more structured design logic that augments cognition bringing more legibility to the design thinking process.}
}

@article{doi:10.1177/07356331231225468,
author = {Ting-Ting Wu and Lusia Maryani Silitonga and Budi Dharmawan and Astrid Tiara Murti},
title = {Empowering Students to Thrive: The Role of CT and Self-Efficacy in Building Academic Resilience},
journal = {Journal of Educational Computing Research},
volume = {62},
number = {3},
pages = {816–845},
year = {2024j},
doi = {10.1177/07356331231225468},
URL = {https://doi-org.crai.referencistas.com/10.1177/07356331231225468},
eprint = {https://doi-org.crai.referencistas.com/10.1177/07356331231225468},
abstract = {The relationship between computational thinking (CT) and academic self-efficacy for building students’ academic resilience—a trait crucial for problem-solving, peer relationships, and confidence development—was investigated. A mixed-methods approach was employed in a study involving 60 participants; half were given CT instruction and half were instructed traditionally. Quantitative data were analyzed using analysis of covariance and path analysis, while MAXQDA software was employed for qualitative interview data. The study found a positive correlation between CT instruction and academic self-efficacy with increased academic resilience, particularly in the experimental group, and identified key factors contributing to resilience. This study demonstrates the effectiveness of computational thinking (CT) and academic self-efficacy in enhancing academic performance, offering a new understanding of how these elements can be integrated into education to boost student resilience. It establishes a direct empirical link between CT instruction and increased academic self-efficacy, underscoring the value of specific teaching methodologies in fostering resilience. The findings are significant for educators, policymakers, and stakeholders in developing strategies to enhance students’ academic and personal success, thereby promoting their overall well-being. Recognizing the importance of CT and self-efficacy paves the way for customized educational programs that effectively support and empower students to thrive.}
}

